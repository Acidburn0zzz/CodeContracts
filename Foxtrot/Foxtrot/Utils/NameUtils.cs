using System;
using System.Compiler;

namespace Microsoft.Contracts.Foxtrot.Utils
{
    /// <summary>
    /// Extractor as well as Rewriter are relying on some special naming conventions
    /// for code analysis purposes.
    /// This class contains helper methods to help with this.
    /// </summary>
    internal static class NameUtils
    {
        /// <summary>
        /// This method returns true if <paramref name="local"/> is a reference to
        /// anonymous variable generated by C# compiler for expression trees.
        /// </summary>
        /// <remarks>C# compiler generates code for expression trees that would be invalid from
        /// Code Contracts perspective (for instance, local assinment before Requires could happen etc).
        /// </remarks>
        public static bool IsExpressionTreeLocal(Local local)
        {
            if (local == null)
                return false;

            return IsAnonymousLocal(local) && IsOfType(local, typeof(System.Linq.Expressions.ParameterExpression).FullName);
        }

        /// <summary>
        /// Returns true if the local variable has no name in the IL and the name was introduced by the IL reader.
        /// </summary>
        public static bool IsAnonymousLocal(Local local)
        {
            if (local == null || local.Name == null)
                return false;

            return local.Anonymous;
        }

        /// <summary>
        /// Returns true if <paramref name="local"/>'s type is equals to <paramref name="fullTypeName"/>.
        /// </summary>
        public static bool IsOfType(Local local, string fullTypeName)
        {
            return local != null && local.Type != null &&
                   local.Type.FullName.Equals(fullTypeName, StringComparison.OrdinalIgnoreCase);
        }
    }
}